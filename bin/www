#!/usr/bin/env


// Module depencies

const app = require('../app');
const debug = require('debug')('MEAN-stack-authentication:server');
const http = require('http');


/// Get port from environment and store in Express.

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/// create HTTP server
const server = http.createServer(app);

console.log(port);
/// listen on provided port, and on all network interfaces

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/// Normalize a port into a number, string, or false.
function normalizePort (val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}


/// Event listener for HTTP server "error" event.
function onError (error) {
	if (error.syscal !== 'listen') {
		throw error;
	}

	const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

	// handle specific listen errors wth frendly messages
	switch (error.code) {
		case 'EACCESS':
			console.error(`${bind} requires elevated priviliges`);
			process.exit(1);
			break;
		case 'EADDRIUNUSE':
			console.log(`${bind} is already in use`);
			process.exit(1);
			break;
		default:
			throw error;
	}
}

// Event listener for HTTP server "listening" event.

function onListening() {
	const addr = server.address();
	const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
	debug('Listening on ' + bind);
}